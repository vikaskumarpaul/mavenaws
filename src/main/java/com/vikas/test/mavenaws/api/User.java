/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.vikas.test.mavenaws.api;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.vikas.test.mavenaws.api.model.constant.Userdetails;
import com.vikas.test.mavenaws.api.model.error.ErrorResponse;
import com.vikas.test.mavenaws.api.model.request.CreateUserRequest;
import com.vikas.test.mavenaws.api.util.ApiUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-04T12:51:44.164+05:30[Asia/Calcutta]")

@Validated
@Api(value = "user", description = "the user API")
public interface User {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	@ApiOperation(value = "Create user", nickname = "createUser", notes = "This can only be done by the logged in user.", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "User Sucessfully Created"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/user", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> createUser(
			@ApiParam(value = "Created user object", required = true) @Valid @RequestBody CreateUserRequest createUserRequest) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Creates list of users with given input array", nickname = "createUsersWithArrayInput", notes = "Creates list of users with given input array", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "User Creted With List Sucessful"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/user/createWithArray", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> createUsersWithArrayInput(
			@ApiParam(value = "List of user object", required = true) @Valid @RequestBody List<CreateUserRequest> createUserRequest) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "This can only be done by the logged in user.", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "User Sucessfully Deleted"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/user/{username}", produces = { "application/json" }, method = RequestMethod.DELETE)
	default ResponseEntity<Void> deleteUser(
			@ApiParam(value = "The name that needs to be deleted", required = true) @PathVariable("username") String username) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "", response = Userdetails.class, tags = {
			"user", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "User Details Sucessfully retrived", response = Userdetails.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/user/{username}", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<Userdetails> getUserByName(
			@ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ", required = true) @PathVariable("username") String username) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"Role\" : [ null, null ],  \"Type\" : [ null, null ],  \"customerUUID\" : \"customerUUID\",  \"ContactEmail\" : \"ContactEmail\",  \"ContactNumber\" : 1111111111,  \"id\" : 0,  \"ContactName\" : \"ContactName\"}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Logs user into the system", nickname = "loginUser", notes = "Logs user into the system", response = String.class, tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "User Sucessfully Loggedin", response = String.class),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/user/login", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<String> loginUser(
			@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "username", required = true) String username,
			@NotNull @ApiParam(value = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Logs out current logged in user session", nickname = "logoutUser", notes = "", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "User Logout Sucessful"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/user/logout", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<Void> logoutUser() {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@ApiOperation(value = "Updated user", nickname = "updateUser", notes = "This can only be done by the logged in user.", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "User Sucessfully updated"),
			@ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "customer not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponse.class),
			@ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/user", produces = { "application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<Void> updateUser(
			@ApiParam(value = "name that need to be updated", required = true) @PathVariable("username") String username,
			@ApiParam(value = "Updated user object", required = true) @Valid @RequestBody CreateUserRequest createUserRequest) {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

}
